---
import RelatedPosts from "../components/RelatedPost.astro";
import Layout from "./Layout.astro";
import Tag from "../components/Tag.astro";

const { frontmatter } = Astro.props;
const projects = await Astro.glob("../pages/projects/*.md");
const blogs = await Astro.glob("../pages/blogs/*.md");
const allPosts = [...projects, ...blogs];
---

<Layout>
  <div class="container-fluid px-0 px-md-3 py-3">
    <div class="row g-3">
      <div class="col-12 col-lg-8 order-1 order-lg-1">
        <div class="post-image-wrapper mb-3 shadow-sm">
          {
            frontmatter.image?.url && (
              <img
                src={frontmatter.image.url}
                alt={frontmatter.image.alt || "Post image"}
                class="img-fluid w-100 post-image"
              />
            )
          }
        </div>

        <div class="px-3 px-md-0">
          <h1 class="mt-3 fs-3 fs-md-2">{frontmatter.title}</h1>

          {
            frontmatter.tags && frontmatter.tags.length > 0 && (
              <div class="post-tags mb-3">
                {frontmatter.tags.map((tag) => (
                  <span class="badge bg-secondary me-2">{tag}</span>
                ))}
              </div>
            )
          }
        <div class="d-flex flex-column flex-sm-row gap-2 mb-3">
            {frontmatter.links.map((link) => (
            <a
                href={link.url}
                class={`btn ${link.class} w-10 w-sm-auto`}
                target="_blank"
                rel="noopener noreferrer"
            >
                {link.text}
            </a>
            ))}
        </div>
        

          <article class="markdown-content p-3">
            <p class="text-muted mb-2 small">
              <b>{new Date(frontmatter.pubDate).toLocaleDateString()}</b>
            </p>
            <slot />
          </article>
        </div>
      </div>

      <div class="col-12 col-lg-4 order-2 order-lg-2 mb-3 side-re">
        <div class="sticky-top">
          <div class="mb-3 px-3 px-md-0 tag-container">
            <Tag />
          </div>

          <div class="card-body p-2">
            <h5>Other Posts</h5>
            <div class="all-posts-container">
              {
                allPosts.map((post) => {
                  const { url, frontmatter } = post;
                  return (
                    <div
                      class="tags-container"
                      data-tags={
                        frontmatter.tags ? frontmatter.tags.join(",") : ""
                      }
                    >
                      <a href={url} key={url} class="mb-2">
                        <RelatedPosts {...frontmatter} />
                      </a>
                    </div>
                  );
                })
              }
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</Layout>

<style>
  .side-re {
    max-width: 90vw;
  }
  .post-image-wrapper {
    width: 100%;
    overflow: hidden;
  }

  .post-image {
    max-width: 90vw;
    height: auto;
    object-fit: contain;
    aspect-ratio: 16 / 9;
    border-radius: 10px;
  }
  a {
    text-decoration: none;
    color: inherit;
  }

  .markdown-content {
    line-height: 1.8;
    font-size: 1rem;
    background-color: rgb(0 0 0 / 5%);
  }

  .tag-container {
    overflow-x: auto;
    max-width: 100%;
    -webkit-overflow-scrolling: touch;
  }

  .tag-container::-webkit-scrollbar {
    display: none;
  }

  .post-tags .badge {
    margin-right: 5px;
    margin-bottom: 5px;
  }

  .all-posts-container {
    max-height: 500px;
    overflow-y: auto;
  }

  @media (max-width: 991px) {
    .post-image {
      max-height: 250px;
    }
  }

  @media (max-width: 576px) {
    .post-image {
      max-height: 200px;
    }
  }
</style>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const tagButtons = document.querySelectorAll(".tags-container button");
    const allPostsContainer = document.querySelector(".all-posts-container");
    const allPosts = allPostsContainer.querySelectorAll(".tags-container");

    tagButtons.forEach((button) => {
      button.addEventListener("click", () => {
        // Remove active class from all buttons
        tagButtons.forEach((btn) => btn.classList.remove("active"));

        // Add active class to clicked button
        button.classList.add("active");

        // Get the selected tag
        const selectedTag = button.getAttribute("data-tag");

        // Filter posts
        allPosts.forEach((postContainer) => {
          // Get tags and split (handle potential null/undefined)
          const cardTagsAttr = postContainer.getAttribute("data-tags");
          const cardTags = cardTagsAttr ? cardTagsAttr.split(",") : [];

          // Determine visibility
          if (selectedTag === "All" || cardTags.includes(selectedTag)) {
            postContainer.style.display = "block";
          } else {
            postContainer.style.display = "none";
          }
        });
      });
    });
  });
</script>
