<!-- Add this inside your navbar's search section -->
<div class="terminal-dropdown mx-4">
  <div class="input-group terminal-bar">
    <input type="text" class="form-control terminal-input" id="terminal-input" placeholder="Type a command..." readonly>
    <button class="btn btn-outline-secondary terminal-btn">
      <i class="fa-solid fa-terminal"></i>
    </button>
  </div>
  
  <div class="terminal-window" id="terminal-window">
    <div class="terminal-header d-flex justify-content-between align-items-center px-3 py-2">
      <div class="terminal-controls">
        <span class="control close"></span>
        <span class="control minimize"></span>
        <span class="control maximize"></span>
      </div>
      <small class="text-muted">Portfolio Terminal</small>
    </div>
    <div class="terminal-body" id="terminal-body">
      <div class="output welcome-message">Welcome to the portfolio terminal! Type 'help' for commands.</div>
      <div id="terminal-rows"></div>
      <div class="input-line">
        <span class="prompt">guest@portfolio:<span class="path">~</span>$</span>
        <input type="text" class="active-input" id="active-terminal-input" autofocus>
        <span class="typed-cursor">█</span>
      </div>
    </div>
  </div>
</div>

<style>
.terminal-dropdown {
  position: relative;
  width: 100%;
  max-width: 1000px;
  margin: 0 auto;
}

/* Hide default input on mobile */
@media (max-width: 595px) {
  .terminal-input {
    display: none !important;
  }
  
  .terminal-btn {
    border-radius: 4px !important;
    margin-left: auto;
  }
  
  .terminal-dropdown {
    margin: 0 !important; 
  }
}

.terminal-window {
  display: none;
  position: absolute;
  top: calc(100% + 10px);
  left: 0;
  right: 0;
  background: #1a1b26;
  border-radius: 10px;
  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
  z-index: 1000;
  overflow: hidden;
  font-family: 'JetBrains Mono', 'Fira Code', monospace;
  opacity: 0;
  transform: translateY(-10px);
  transition: all 0.3s ease;
}

.terminal-window.show {
  opacity: 1;
  transform: translateY(0);
}

.terminal-bar {
  transition: all 0.3s ease;
}

.terminal-bar.hide {
  opacity: 0;
  transform: translateY(-10px);
}

.terminal-header {
  background: #1f2335;
  border-bottom: 1px solid #2f334d;
}

.terminal-controls {
  display: flex;
  gap: 8px;
}

.control {
  width: 12px;
  height: 12px;
  border-radius: 50%;
  display: inline-block;
}

.close { background: #ff5f57; }
.minimize { background: #febc2e; }
.maximize { background: #28c840; }

.terminal-body {
  padding: 16px;
  max-height: 400px;
  overflow-y: auto;
  color: #a9b1d6;
  font-size: 14px;
  line-height: 1.5;
}

.input-line {
  display: flex;
  align-items: center;
  margin-top: 8px;
  position: relative; /* Add this */
}

.active-input {
  background: transparent;
  border: none;
  color: #a9b1d6;
  font-family: inherit;
  font-size: inherit;
  width: 1px;  /* Change from flex: 1 to width: 1px */
  flex-grow: 1; /* Add this */
  outline: none;
  margin-left: 8px;
  position: relative; /* Add this */
  caret-color: transparent;
}


.prompt {
  color: #7aa2f7;
  white-space: nowrap;
}

.path {
  color: #9ece6a;
}

.output {
  margin-bottom: 8px;
  white-space: pre-wrap;
  word-wrap: break-word;
}

.output.error {
  color: #f7768e;
}

.output.success {
  color: #9ece6a;
}

.welcome-message {
  color: #bb9af7;
  font-weight: 500;
}

.typed-cursor {
  position: absolute; /* Add this */
  left: calc(8px + 17ch); /* Position after prompt spacing */
  animation: blink 1s infinite;
  color: #7aa2f7;
  pointer-events: none; /* Add this */
}

@keyframes blink {
  0%, 100% { opacity: 1; }
  50% { opacity: 0; }
}

.terminal-body::-webkit-scrollbar {
  width: 8px;
}

.terminal-body::-webkit-scrollbar-track {
  background: #1f2335;
}

.terminal-body::-webkit-scrollbar-thumb {
  background: #2f334d;
  border-radius: 4px;
}

.terminal-body::-webkit-scrollbar-thumb:hover {
  background: #3b4261;
}

@media (max-width: 768px) {
  .terminal-window {
    position: fixed;
    top: 60px;
    left: 0;
    right: 0;
    bottom: 0;
    border-radius: 0;
    max-height: calc(100vh - 60px);
  }
  
  .terminal-body {
    max-height: calc(100vh - 120px);
  }
}
</style>

<script>
document.addEventListener('DOMContentLoaded', () => {
  const terminalBar = document.querySelector('.terminal-bar');
  const terminalWindow = document.getElementById('terminal-window');
  const terminalBody = document.getElementById('terminal-body');
  const terminalRows = document.getElementById('terminal-rows');
  const activeInput = document.getElementById('active-terminal-input');

  // File system simulation
  const fileSystem = {
    '/home/guest': {
      'name.txt': 'Naveen Pal',
      'aboutme.txt': 'I am a passionate developer. My interests lie in Cybersecurity, system programming and Web Development',
      'projects.txt': `Will update soon`
    }
  };

  let currentPath = '/home/guest';

  // Command handlers
  const commands = {
    ls: (args) => {
      const path = args[0] || currentPath;
      return Object.keys(fileSystem[path]).join('  ');
    },
    pwd: () => currentPath,
    cd: (args) => {
      const newPath = args[0] || '/home/guest';
      if (fileSystem[newPath]) {
        currentPath = newPath;
        return '';
      }
      return `cd: no such directory: ${newPath}`;
    },
    cat: (args) => {
      if (!args.length) return 'Usage: cat <filename>';
      const file = fileSystem[currentPath][args[0]];
      return file || `cat: ${args[0]}: No such file`;
    },
    clear: () => {
      terminalRows.innerHTML = "";
      return "";
    },
    help: () => `Available commands:
• ls - List files in current directory
• pwd - Print working directory
• cd - Change directory
• cat - View file contents
• clear - Clear terminal
• echo - Print text
• date - Show current date
• whoami - Show current user
• help - Show this help message`,
    echo: (args) => args.join(' '),
    date: () => new Date().toLocaleString(),
    whoami: () => 'guest',
    tree: () => {
      let output = '.';
      for (const file of Object.keys(fileSystem[currentPath])) {
        output += `\n└── ${file}`;
      }
      return output;
    }
  };

  function handleCommand(cmd) {
    const normalizedCmd = cmd.replace(/\/n/g, '\n');
    const [command, ...rest] = normalizedCmd.trim().split(' ');
    const handler = commands[command];
    if (handler) {
      const rawOutput = handler(rest);
      return rawOutput.toString().replace(/\/n/g, '\n');
    }
    return `Command not found: ${command}. Type 'help' for available commands.`;
  }

  // Toggle terminal
  const terminalButton = document.querySelector('.terminal-btn');
  const terminalInput = document.querySelector('.terminal-input');

  function showTerminal() {
    terminalBar.classList.add('hide');
    setTimeout(() => {
      terminalWindow.style.display = 'block';
      setTimeout(() => {
        terminalWindow.classList.add('show');
        activeInput.focus();
      }, 50);
    }, 300);
  }

  function hideTerminal() {
    terminalWindow.classList.remove('show');
    setTimeout(() => {
      terminalWindow.style.display = 'none';
      terminalBar.classList.remove('hide');
    }, 300);
  }

  terminalBar.addEventListener('click', showTerminal);
  terminalButton.addEventListener('click', (e) => {
    e.stopPropagation();
    showTerminal();
  });

  // Handle input
  activeInput.addEventListener('keydown', (e) => {
    if (e.key === 'Enter') {
      const cmd = activeInput.value.trim();
      if (!cmd) return;

      // Add command to terminal
      const cmdLine = document.createElement('div');
      cmdLine.innerHTML = `<span class="prompt">guest@portfolio:<span class="path">~</span>$ </span>${cmd}`;
      terminalRows.appendChild(cmdLine);

      // Process command
      const commandOutput = handleCommand(cmd);

      // Add output
      const output = document.createElement('div');
      output.classList.add('output');
      output.textContent = commandOutput;
      terminalRows.appendChild(output);

      // Clear input and scroll to bottom
      activeInput.value = '';
      terminalBody.scrollTop = terminalBody.scrollHeight;
    }
  });

  // Close terminal when clicking outside
  document.addEventListener('click', (e) => {
    if (!terminalWindow.contains(e.target) && 
        !terminalBar.contains(e.target)) {
      hideTerminal();
    }
  });
});
const cursor = document.querySelector('.typed-cursor');

// Function to update cursor position
function updateCursorPosition() {
  const input = document.getElementById('active-terminal-input');
  const prompt = document.querySelector('.prompt');
  
  // Create a temporary span to measure text width
  const measureSpan = document.createElement('span');
  measureSpan.style.visibility = 'hidden';
  measureSpan.style.position = 'absolute';
  measureSpan.style.whiteSpace = 'pre';
  measureSpan.style.font = window.getComputedStyle(input).font;
  measureSpan.textContent = input.value.substring(0, input.selectionStart);
  document.body.appendChild(measureSpan);
  
  // Calculate new position
  const inputRect = input.getBoundingClientRect();
  const promptWidth = prompt.getBoundingClientRect().width;
  const textWidth = measureSpan.getBoundingClientRect().width;
  
  // Update cursor position
  cursor.style.left = `${promptWidth + textWidth}px`;
  
  // Clean up
  document.body.removeChild(measureSpan);
}

// Add event listeners for cursor position updates
const input = document.getElementById('active-terminal-input');
input.addEventListener('input', updateCursorPosition);
input.addEventListener('keydown', updateCursorPosition);
input.addEventListener('keyup', updateCursorPosition);
input.addEventListener('click', updateCursorPosition);

// Initial cursor position
updateCursorPosition();
</script>