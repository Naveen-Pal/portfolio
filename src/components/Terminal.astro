<section class="terminal-section">
  <div class="terminal" id="terminal">
    <div class="output">Welcome to the custom terminal! Type `help` for a list of commands.</div>
    <div id="terminal-rows"></div>
    <div class="input-row">
      <span class="prompt">user@website:~$</span>
      <input id="input" type="text" autocomplete="off">
    </div>
  </div>
</section>

<style>
  /* Terminal Component Styles */

  .terminal-section {
    background-color: #1e1e1e;
    border: 1px solid #444;
    border-radius: 5px;
    padding: 20px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    overflow-y: auto;
    max-height: 70vh;
    font-family: 'Courier New', monospace;
    color: #f9f9f9;
    white-space: pre-wrap;
  }

  .input-row {
    display: flex;
    align-items: center;
    /* width: 90%; */
    /* max-width: 800px; */
    font-family: 'Courier New', monospace;
    color: #7bd1ff;
    margin-top: 10px;
  }

  .terminal .output {
    margin-bottom: 10px;
    word-wrap: break-word;
  }

  .terminal .output .error {
    color: red;
  }

  .terminal .output .success {
    color: green;
  }

  .prompt {
    color: #7bd1ff;
    margin-right: 5px;
  }

  #input {
    background: transparent;
    border: none;
    color: #ffffff;
    outline: none;
    width: 100%;
    font-family: inherit;
    font-size: 16px;
  }
</style>

<script src="https://cdnjs.cloudflare.com/ajax/libs/figlet/1.5.0/figlet.min.js"></script>
<script>
  document.addEventListener("DOMContentLoaded", () => {
    const terminal = document.getElementById("terminal");
    const terminalRows = document.getElementById("terminal-rows");
    const input = document.getElementById("input");

    // Command handlers
    const commands = {
      ls: () => "name.txt  aboutme.txt  projects.txt  blogs.txt",
      pwd: () => "/home/user",
      clear: () => {
        terminalRows.innerHTML = "";
        return "";
      },
      cls: () => commands.clear(),
      echo: (args) => args.join(" "),
      whoami: () => "Naveen Pal",
      date: () => new Date().toDateString(),
      time: () => new Date().toLocaleTimeString(),
      cat: (args) => {
        const fileContents = {
          "name.txt": "Naveen Pal",
          "aboutme.txt": "I am a passionate developer and cybersecurity enthusiast.",
          "projects.txt": "1. Portfolio Website\n2. Timetable App\n3. AI Assistant\n4. Knative Serverless Projects",
          "blogs.txt": "Stay tuned for my upcoming blogs!",
        };
        return fileContents[args[0]] || `cat: ${args[0]}: No such file`;
      },
      help: () =>
        "Available commands:\n- ls\n- pwd\n- clear/cls\n- echo [text]\n- whoami\n- date\n- time\n- cat [file]\n- about\n- help\n- cowsay [text]\n- figlet [text]",
      cowsay: (args) => {
        const message = args.join(" ");
        return `
         ${"_".repeat(message.length + 2)}
        < ${message} >
         ${"-".repeat(message.length + 2)}
                \\   ^__^
                 \\  (oo)\\_______
                    (__)\\       )\\/\\
                        ||----w |
                        ||     ||`;
      },
      figlet: (args) => {
      let output = "";
      figlet.text(args.join(" "), { horizontalLayout: "fitted" }, (err, data) => {
        if (err) {
          output = `<span class="error">Error generating figlet text.</span>`;
        } else {
          output = `<pre>${data}</pre>`;
        }
        const outputElement = document.createElement("div");
        outputElement.classList.add("output");
        outputElement.innerHTML = output;
        terminal.appendChild(outputElement);
        terminal.scrollTop = terminal.scrollHeight;
      });
      return ""; // Return empty initially since figlet.text is async
    },

    };

    // Error handling
    const handleCommand = (input) => {
  const [command, ...args] = input.trim().split(" ");
  if (commands[command]) {
    const result = commands[command](args);
    if (result) return result; // Return immediately for synchronous commands
    return ""; // Prevent output duplication for async commands
  }
  return `<span class="error">Command not found: ${command}</span>`;
};


    // Handle user input
    input.addEventListener("keydown", (e) => {
      if (e.key === "Enter") {
        const userCommand = input.value.trim();
        if (!userCommand) return;

        // Create and add command row
        const commandRow = document.createElement("div");
        commandRow.innerHTML = `<span class="prompt" style="color: #7bd1ff;" >user@website:~$</span> <span>${userCommand}</span>`;
        terminalRows.appendChild(commandRow);

        // Handle command and add output row
        const output = document.createElement("div");
        output.classList.add("output");
        output.innerHTML = handleCommand(userCommand);
        terminalRows.appendChild(output);

        // Clear input
        input.value = "";

        // Scroll to the bottom
        terminal.scrollTop = terminal.scrollHeight;
      }
    });
  });
</script>
